{    
    "if" : {
        "prefix" : ["if [condition]..."],
        "body" : [
            "if ${1:condition} then",
                "\t ${2:#statement};",
            "elif ${3:condition} then",
                "\t ${4:#statement};", 
            "else",
                "\t ${5:#statement};",
            "end"
        ],
        "description" : "Generates a if block in Nilnovi"
    },
    "while" : {
        "prefix" : ["while [condition]..."],
        "body" : [
            "while ${1:condition} loop",
                "\t ${2:#statement};",
            "end"
        ],
        "description" : "Generates a while block in Nilnovi"
    },

    "for" : {
        "prefix" : ["for [i] from..."],
        "body" : [
            "for ${1|i,j,k|} from ${2:bottomBound} to ${3:upperBound} loop",
                "\t ${4:#statement};",
            "end"
        ],
        "description" : "Generates a for block in Nilnovi"
    },

    "procedure" : {
        "prefix" : ["procedure [p] is..."],
        "body" : [
            "procedure ${1:name}(${2:parameter} : ${3: Type}) is",
                "\t ${4:#variable1} : ${5: Type};",
            "begin",
                "\t ${6:#statement};",
            "end"
        ],
        "description" : "Generates a new procedure in Nilnovi"
    },

    "function" : {
        "prefix" : ["function [p] is..."],
        "body" : [
            "function ${1:name}(${2:parameter} : ${3: Type}) return ${4: Type} is",
                "\t ${5:#variable1} : ${6: Type};",
            "begin",
                "\t ${7:#statement};",
                "return ${8:0};",
            "end"
        ],
        "description" : "Generates a new function in Nilnovi"
    },

    "put" : {
        "prefix" : ["put([i])"],
        "body" : [
            "put(${1:x});"
        ],
        "description" : "Generates the put method in Nilnovi"
    },

    "get" : {
        "prefix" : ["get([i])"],
        "body" : [
            "get(${1:x});"
        ],
        "description" : "Generates the get method in Nilnovi"
    }

}